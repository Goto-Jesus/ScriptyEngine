1. Основні принципи організації директив
Семантичність: Назви повинні відображати функціональність. Наприклад, якщо директива відповідає за рендеринг, назвіть її відповідно.
Модульність: Розділіть код на самодостатні частини, які легко тестувати та розширювати.
Універсальність: Директиви повинні бути гнучкими, щоб їх можна було використовувати в інших іграх чи сценаріях.

2. Категорії директив та приклади іменування
Фізика
Ці директиви відповідальні за рух, гравітацію, зіткнення, тощо.

PhysicsEngine — головний модуль фізики.
Gravity — відповідає за гравітацію.
CollisionHandler — обробник зіткнень.
Rigidbody2D — компонент для об'єктів, що потребують фізичної симуляції.
ForceApplier — для застосування сил до об'єктів (наприклад, стрибок).
Рендеринг
Ці директиви обробляють графіку та її оновлення.

Renderer — базовий клас для відображення символів.
AsciiImage — компонент для створення графіки з символів.
LayeredRenderer — для рендерингу шарів (фон, персонажі, UI).
ScreenManager — для управління виведенням на екран.
Camera — для управління областю, яка рендериться (наприклад, скролінг за персонажем).
Генерація фону
Ці директиви відповідають за створення оточення гри.

BackgroundGenerator — базовий генератор фонів.
StaticBackground — статичний фон.
ProceduralBackground — фон, який генерується процедурно.
ParallaxBackground — фон із ефектом паралаксу.
Ігрові об'єкти та компоненти
Компоненти, які додають функціональність до об'єктів гри.

GameObject — базовий клас ігрових об'єктів.
Component — базовий клас для компонентів.
Collider2D — колайдер для об'єктів.
AnimationController — для управління анімаціями.
PlayerController — контролер персонажа.
AIController — для управління противниками.
Управління грою
Ці директиви відповідають за загальну логіку гри.

GameManager — керує станом гри.
InputHandler — обробляє ввід з клавіатури чи інших пристроїв.
SceneManager — відповідає за перемикання сцен.
Системи
Це універсальні модулі для оптимізації та управління ресурсами.

EventBus — для обробки подій.
ObjectPool — пул об'єктів для оптимізації.
TimeManager — управління часом, наприклад, для анімацій чи затримок.
DebugTools — інструменти для дебагу.

3. Приклад структури директорій

src/
  ├── core/                   # Основні системи
  │   ├── GameEngine.ts       # Головний клас движка
  │   ├── Renderer.ts         # Відповідає за рендеринг
  │   ├── PhysicsEngine.ts    # Фізика
  │   ├── SceneManager.ts     # Сцени
  │   ├── InputHandler.ts     # Управління ввідом
  │
  ├── components/             # Компоненти ігрових об'єктів
  │   ├── Rigidbody2D.ts      # Фізичний компонент
  │   ├── Collider2D.ts       # Колайдер
  │   ├── AnimationController.ts # Анімації
  │
  ├── objects/                # Ігрові об'єкти
  │   ├── GameObject.ts       # Базовий об'єкт
  │   ├── Player.ts           # Гравець
  │   ├── Enemy.ts            # Противник
  │
  ├── utils/                  # Утиліти та допоміжні функції
  │   ├── MathUtils.ts        # Математичні функції
  │   ├── DebugTools.ts       # Інструменти для дебагу
  │
  ├── scenes/                 # Сцени
  │   ├── MainMenu.ts         # Головне меню
  │   ├── Level1.ts           # Рівень 1

4. Як вибрати назви директив?
Використовуйте короткі, але зрозумілі назви (Renderer, PhysicsEngine).
Якщо директива описує конкретну функцію, додайте префікс чи суфікс, наприклад, CollisionHandler.
Уникайте надмірної вкладеності, щоб структурувати код максимально просто.

/* -------------------------------------------------------------------------------------- */